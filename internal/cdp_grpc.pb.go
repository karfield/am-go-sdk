// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: ipc/cdp.proto

package internal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CdpIpcClient is the client API for CdpIpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CdpIpcClient interface {
	GetBrowserwsUrl(ctx context.Context, in *GetBrowserWsUrlRequest, opts ...grpc.CallOption) (*GetBrowserWsUrlResponse, error)
}

type cdpIpcClient struct {
	cc grpc.ClientConnInterface
}

func NewCdpIpcClient(cc grpc.ClientConnInterface) CdpIpcClient {
	return &cdpIpcClient{cc}
}

func (c *cdpIpcClient) GetBrowserwsUrl(ctx context.Context, in *GetBrowserWsUrlRequest, opts ...grpc.CallOption) (*GetBrowserWsUrlResponse, error) {
	out := new(GetBrowserWsUrlResponse)
	err := c.cc.Invoke(ctx, "/cdp_ipc.CdpIpc/GetBrowserwsUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CdpIpcServer is the server API for CdpIpc service.
// All implementations must embed UnimplementedCdpIpcServer
// for forward compatibility
type CdpIpcServer interface {
	GetBrowserwsUrl(context.Context, *GetBrowserWsUrlRequest) (*GetBrowserWsUrlResponse, error)
	mustEmbedUnimplementedCdpIpcServer()
}

// UnimplementedCdpIpcServer must be embedded to have forward compatible implementations.
type UnimplementedCdpIpcServer struct {
}

func (UnimplementedCdpIpcServer) GetBrowserwsUrl(context.Context, *GetBrowserWsUrlRequest) (*GetBrowserWsUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrowserwsUrl not implemented")
}
func (UnimplementedCdpIpcServer) mustEmbedUnimplementedCdpIpcServer() {}

// UnsafeCdpIpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CdpIpcServer will
// result in compilation errors.
type UnsafeCdpIpcServer interface {
	mustEmbedUnimplementedCdpIpcServer()
}

func RegisterCdpIpcServer(s grpc.ServiceRegistrar, srv CdpIpcServer) {
	s.RegisterService(&CdpIpc_ServiceDesc, srv)
}

func _CdpIpc_GetBrowserwsUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrowserWsUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CdpIpcServer).GetBrowserwsUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cdp_ipc.CdpIpc/GetBrowserwsUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CdpIpcServer).GetBrowserwsUrl(ctx, req.(*GetBrowserWsUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CdpIpc_ServiceDesc is the grpc.ServiceDesc for CdpIpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CdpIpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cdp_ipc.CdpIpc",
	HandlerType: (*CdpIpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBrowserwsUrl",
			Handler:    _CdpIpc_GetBrowserwsUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipc/cdp.proto",
}
